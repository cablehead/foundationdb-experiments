#!/usr/bin/env python3


"""
Usage:
    {name} <path> ls
    {name} <path> run
    {name} <path> add -t <trigger> <command> <descrption>
    {name} <path> last <commandid>
    {name} <path> each <commandid> -- <command>...
"""


import subprocess
import struct
import shlex
import json
import time
import sys


from datetime import datetime
from datetime import timedelta

import fity3

from docopt import docopt

import ftw
from ftw import play

import fdb
fdb.api_version(510)


f3 = fity3.generator(1)


@fdb.transactional
def add(tr, b, trigger, command, descrption):
    b.put(tr, b'command', struct.pack('>Q', next(f3)), json.dumps({
        'trigger': trigger,
        'command': command,
        'descrption': descrption, }).encode())


def run_once(db, b, space):
    for command in b.get(db, b'command'):
        cid, = struct.unpack('>Q', command.item)
        data = json.loads(command.value)

        typ, value = data['trigger'].split(':')
        assert typ == 'time'
        value = ftw.human.convert_to_seconds(value)
        value = timedelta(seconds=value)

        stream = ftw.play.Stream(db, f3, space[cid])
        last_ran = datetime.now() - stream.last(db).datetime

        if last_ran > value:
            print(data['descrption'])
            start = time.time()
            print(data['command'], end=' ')
            args = shlex.split(data['command'][0])
            p = subprocess.Popen(args, stdout=subprocess.PIPE)
            stream.put(db, p.stdout)
            print('took={}ms status={}'.format(
                round((time.time()-start)*1000), p.wait()))


def main(a):
    db = fdb.open()

    space = fdb.directory.create_or_open(db, tuple(a['<path>'].split('.')))

    b = ftw.bucket.Bucket(space['__meta'])

    if a['ls']:
        for command in b.get(db, b'command'):
            cid, = struct.unpack('>Q', command.item)
            data = json.loads(command.value)
            stream = ftw.play.Stream(db, f3, space[cid])
            last = stream.last(db)
            ago = ''
            if last:
                ago = ftw.human.humanize_time(
                    (datetime.now() - last.datetime).total_seconds())
            last = last and last.datetime.isoformat() or 'never run'
            print(
                cid,
                data['trigger'],
                data['descrption'],
                data['command'],
                stream.count(db),
                last,
                ago,
                )
        return

    if a['last']:
        stream = ftw.play.Stream(db, f3, space[int(a['<commandid>'])])
        sys.stdout.buffer.write(stream.last(db).value)
        return

    if a['each']:
        stream = ftw.play.Stream(db, f3, space[int(a['<commandid>'])])
        for item in stream.range(db):
            p = subprocess.Popen(a['<command>'], stdin=subprocess.PIPE)
            p.stdin.write(item.value)
            p.stdin.close()
            p.wait()
        return

    if a['add']:
        return add(db, b, a['<trigger>'], a['<command>'], a['<descrption>'])

    if a['run']:
        while True:
            run_once(db, b, space)
            time.sleep(1)
    return

    if a['stream']:
        s = play.Stream(db, space[a['<name>']])
        if a['put']:
            return s.put(db, sys.stdin.buffer)


if __name__ == '__main__':
    usage = ' '.join([x.strip() for x in __doc__.split('\\')])
    usage = usage.format(name=sys.argv[0])
    a = docopt(usage)
    sys.exit(main(a))
